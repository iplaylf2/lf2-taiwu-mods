name: On Push to Mod Tag

on:
  push:
    tags:
      - mods/*/v*

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Configuration
        id: config
        run: |
          set -euo pipefail

          sln_file="lf2-taiwu-mods.slnx"
          sln_root_dir="."
          property_source_project_abs=$(
            find "$sln_root_dir/projects/mods" -type f -name '*.csproj' -print \
              | LC_ALL=C sort \
              | head -n 1
          )

          if [ -z "$property_source_project_abs" ]; then
            echo "::error::Unable to locate a property source project under '$sln_root_dir/projects/mods'."
            exit 1
          fi

          property_source_project_rel=$(realpath --relative-to="$sln_root_dir" "$property_source_project_abs")

          {
            echo "sln_file=$sln_file"
            echo "sln_root_dir=$sln_root_dir"
            echo "property_source_project=$property_source_project_rel"
          } >> "$GITHUB_OUTPUT"

      - name: Setup Mod Environment
        uses: ./.github/actions/setup-mod-env

      - name: Parse Tag Information
        id: parse-tag
        run: |
          set -euo pipefail
          full_tag="${GITHUB_REF#refs/tags/}"

          if [[ ! "$full_tag" =~ ^mods/[^/]+/v[^/]+$ ]]; then
            echo "::error::Invalid tag format. Expected 'mods/<mod-name>/v<version>'"
            exit 1
          fi

          mod_name="${full_tag#mods/}"
          mod_name="${mod_name%%/*}"
          version="${full_tag##*/}"
          version="${version#v}"

          echo "full_tag=$full_tag" >> $GITHUB_OUTPUT
          echo "mod_name=$mod_name" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Resolve Release Properties
        id: release-props
        run: |
          set -euo pipefail
          sln_root_dir="${{ steps.config.outputs.sln_root_dir }}"
          source_project="${{ steps.config.outputs.property_source_project }}"

          game_version=$(
            cd "$sln_root_dir" && \
            dotnet msbuild "$source_project" -getProperty:LF2TaiwuVersion
          )
          publish_base_dir_abs=$(
            cd "$sln_root_dir" && \
            dotnet msbuild "$source_project" -getProperty:LF2PublishDir
          )

          if [ -z "$game_version" ] || [ -z "$publish_base_dir_abs" ]; then
            echo "::error::Failed to retrieve MSBuild properties (LF2TaiwuVersion or LF2PublishDir)."
            exit 1
          fi

          mkdir -p "$publish_base_dir_abs"
          publish_base_dir_rel=$(realpath --relative-to=. "$publish_base_dir_abs")

          echo "game_version=$game_version" >> $GITHUB_OUTPUT
          echo "publish_base_dir=$publish_base_dir_rel" >> $GITHUB_OUTPUT

      - name: Build and Publish Mod
        run: |
          set -euo pipefail

          sln_file="${{ steps.config.outputs.sln_file }}"
          sln_root_dir="${{ steps.config.outputs.sln_root_dir }}"

          dotnet build $sln_root_dir/$sln_file \
              -t:LF2PublishMod \
              -c Release \
              -p:LF2Mod="${{ steps.parse-tag.outputs.mod_name }}" \
              -p:Version="${{ steps.parse-tag.outputs.version }}"

      - name: Package Artifact for Release
        id: package
        run: |
          set -euo pipefail
          mod_publish_dir="${{ steps.release-props.outputs.publish_base_dir }}/${{ steps.parse-tag.outputs.mod_name }}"
          archive_path="${{ steps.parse-tag.outputs.mod_name }}_v${{ steps.parse-tag.outputs.version }}.zip"
          build_date_readable=$(date -u +'%Y-%m-%d %H:%M:%S UTC')

          (cd "$mod_publish_dir" && zip -r "../../${archive_path}" .)

          echo "archive_path=$archive_path" >> $GITHUB_OUTPUT
          echo "build_date=$build_date_readable" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.parse-tag.outputs.full_tag }}
          name: ${{ steps.parse-tag.outputs.mod_name }} v${{ steps.parse-tag.outputs.version }}
          body: |
            ## Mod Release: ${{ steps.parse-tag.outputs.mod_name }}
            **Version**: ${{ steps.parse-tag.outputs.version }}
            **Game Version**: ${{ steps.release-props.outputs.game_version }}
            **Build Date**: ${{ steps.package.outputs.build_date }}
          files: ${{ steps.package.outputs.archive_path }}
          draft: false
          prerelease: false
